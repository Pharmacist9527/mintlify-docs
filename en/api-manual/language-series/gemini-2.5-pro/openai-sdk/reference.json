{
  "openapi": "3.1.0",
  "info": {
    "title": "Gemini-2.5-pro Full Reference",
    "description": "Complete API reference for Gemini-2.5-pro chat interface, including all parameters and advanced features",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.evolink.ai",
      "description": "Production environment"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/chat/completions": {
      "post": {
        "summary": "Gemini-2.5-pro Chat API",
        "description": "- Call Gemini-2.5-pro model using OpenAI SDK format\n- Synchronous processing mode, returns conversation content in real-time\n- **Plain text conversation**: Single-turn or multi-turn contextual dialogue, see simple_text and multi_turn examples in code samples\n- **System prompt**: Customize AI role and behavior, see system_prompt example in code samples\n- **Multimodal input**: Supports text + image mixed input, see vision and multi_image examples in code samples",
        "operationId": "createChatCompletion",
        "tags": [
          "Chat Completion"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              },
              "examples": {
                "simple_text": {
                  "summary": "Single-turn text conversation",
                  "value": {
                    "model": "gemini-2.5-pro",
                    "messages": [
                      {
                        "role": "user",
                        "content": "Please introduce yourself"
                      }
                    ]
                  }
                },
                "multi_turn": {
                  "summary": "Multi-turn conversation (context understanding)",
                  "value": {
                    "model": "gemini-2.5-pro",
                    "messages": [
                      {
                        "role": "user",
                        "content": "What is Python?"
                      },
                      {
                        "role": "assistant",
                        "content": "Python is a high-level programming language..."
                      },
                      {
                        "role": "user",
                        "content": "What are its advantages?"
                      }
                    ]
                  }
                },
                "system_prompt": {
                  "summary": "Using system prompt",
                  "value": {
                    "model": "gemini-2.5-pro",
                    "messages": [
                      {
                        "role": "system",
                        "content": "You are a professional Python programming assistant, answering questions concisely."
                      },
                      {
                        "role": "user",
                        "content": "How to read a file?"
                      }
                    ]
                  }
                },
                "vision": {
                  "summary": "Multimodal input (text + image)",
                  "value": {
                    "model": "gemini-2.5-pro",
                    "messages": [
                      {
                        "role": "user",
                        "content": [
                          {
                            "type": "text",
                            "text": "Please describe the scene and main elements in this image in detail."
                          },
                          {
                            "type": "image_url",
                            "image_url": {
                              "url": "https://example.com/image.png"
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "multi_image": {
                  "summary": "Multiple images input",
                  "value": {
                    "model": "gemini-2.5-pro",
                    "messages": [
                      {
                        "role": "user",
                        "content": [
                          {
                            "type": "text",
                            "text": "Compare the differences between these two images"
                          },
                          {
                            "type": "image_url",
                            "image_url": {
                              "url": "https://example.com/image1.png"
                            }
                          },
                          {
                            "type": "image_url",
                            "image_url": {
                              "url": "https://example.com/image2.png"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat completion generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 400,
                    "message": "Invalid request parameters",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 401,
                    "message": "Invalid or expired token",
                    "type": "authentication_error"
                  }
                }
              }
            }
          },
          "402": {
            "description": "Insufficient quota, recharge required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 402,
                    "message": "Insufficient quota",
                    "type": "insufficient_quota_error",
                    "fallback_suggestion": "https://evolink.ai/dashboard/billing"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 403,
                    "message": "Access denied for this model",
                    "type": "permission_error",
                    "param": "model"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 404,
                    "message": "Specified model not found",
                    "type": "not_found_error",
                    "param": "model",
                    "fallback_suggestion": "gemini-2.5-pro"
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request body too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 413,
                    "message": "Image file too large",
                    "type": "request_too_large_error",
                    "param": "content",
                    "fallback_suggestion": "compress image to under 10MB"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 429,
                    "message": "Rate limit exceeded",
                    "type": "rate_limit_error",
                    "fallback_suggestion": "retry after 60 seconds"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 500,
                    "message": "Internal server error",
                    "type": "internal_server_error",
                    "fallback_suggestion": "try again later"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Upstream service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 502,
                    "message": "Upstream AI service unavailable",
                    "type": "upstream_error",
                    "fallback_suggestion": "try different model"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 503,
                    "message": "Service temporarily unavailable",
                    "type": "service_unavailable_error",
                    "fallback_suggestion": "retry after 30 seconds"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ChatCompletionRequest": {
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "Chat model name",
            "enum": [
              "gemini-2.5-pro"
            ],
            "default": "gemini-2.5-pro",
            "example": "gemini-2.5-pro"
          },
          "messages": {
            "type": "array",
            "description": "List of chat messages, supports multi-turn dialogue and multimodal input",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "minItems": 1
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to return response in streaming mode\n\n- `true`: Streaming return, receives content in real-time chunks\n- `false`: Returns complete response at once",
            "example": false
          },
          "max_tokens": {
            "type": "integer",
            "description": "Maximum number of tokens for generated response\n\n**Description**:\n- Too small value may cause response truncation",
            "minimum": 1,
            "example": 2000
          },
          "temperature": {
            "type": "number",
            "description": "Sampling temperature, controls output randomness\n\n**Description**:\n- Lower values (e.g., 0.2): More deterministic, focused output\n- Higher values (e.g., 1.5): More random, creative output",
            "minimum": 0,
            "maximum": 2,
            "example": 0.7
          },
          "top_p": {
            "type": "number",
            "description": "Nucleus Sampling parameter\n\n**Description**:\n- Controls sampling from tokens with cumulative probability\n- For example, 0.9 means selecting from tokens with cumulative probability up to 90%\n- Default: 1.0 (considers all tokens)\n\n**Recommendation**: Do not adjust temperature and top_p simultaneously",
            "minimum": 0,
            "maximum": 1,
            "example": 0.9
          },
          "top_k": {
            "type": "integer",
            "description": "Top-K sampling parameter\n\n**Description**:\n- For example, 10 means limiting sampling to consider only the top 10 most probable tokens\n- Smaller values make output more focused\n- Default: no limit",
            "minimum": 1,
            "example": 40
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "description": "Message role\n\n- `user`: User message\n- `assistant`: AI assistant message (for multi-turn conversation)\n- `system`: System prompt (sets AI's role and behavior)",
            "enum": [
              "user",
              "assistant",
              "system"
            ],
            "example": "user"
          },
          "content": {
            "type": "array",
            "description": "Message content. Supports two formats:\n\n**1. Plain text string**: Can directly pass string, e.g., `\"content\":\"Please introduce yourself\"`\n\n**2. Object array** (supports text input, multimodal input): See example structure below",
            "items": {
              "$ref": "#/components/schemas/ContentPart"
            }
          }
        }
      },
      "ContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextContent"
          },
          {
            "$ref": "#/components/schemas/ImageContent"
          }
        ]
      },
      "TextContent": {
        "title": "Text Content",
        "type": "object",
        "required": [
          "type",
          "text"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text"
            ],
            "description": "Content type"
          },
          "text": {
            "type": "string",
            "description": "Text content",
            "example": "Please describe this image in detail"
          }
        }
      },
      "ImageContent": {
        "title": "Image Content",
        "type": "object",
        "required": [
          "type",
          "image_url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_url"
            ],
            "description": "Content type"
          },
          "image_url": {
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "format": "uri",
                "description": "Image URL address\n\n**Limits**:\n- Maximum size per image: `10MB`\n- Supported formats: `.jpeg`, `.jpg`, `.png`, `.webp`\n- URL requirements: Must be publicly accessible, generally ends with image extension",
                "example": "https://example.com/image.png"
              }
            }
          }
        }
      },
      "ChatCompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the chat completion",
            "example": "chatcmpl-20251010015944503180122WJNB8Eid"
          },
          "model": {
            "type": "string",
            "description": "Model name actually used",
            "example": "gemini-2.5-pro"
          },
          "object": {
            "type": "string",
            "enum": [
              "chat.completion"
            ],
            "description": "Response type",
            "example": "chat.completion"
          },
          "created": {
            "type": "integer",
            "description": "Creation timestamp",
            "example": 1760032810
          },
          "choices": {
            "type": "array",
            "description": "List of chat completion choices",
            "items": {
              "$ref": "#/components/schemas/Choice"
            }
          },
          "usage": {
            "$ref": "#/components/schemas/Usage"
          }
        }
      },
      "Choice": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "Choice index",
            "example": 0
          },
          "message": {
            "$ref": "#/components/schemas/AssistantMessage"
          },
          "finish_reason": {
            "type": "string",
            "description": "Finish reason",
            "enum": [
              "stop",
              "length",
              "content_filter"
            ],
            "example": "stop"
          }
        }
      },
      "AssistantMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Message sender role",
            "enum": [
              "assistant"
            ],
            "example": "assistant"
          },
          "content": {
            "type": "string",
            "description": "AI response message content",
            "example": "Hello! I'm pleased to introduce myself.\n\nI'm a Large Language Model, trained and developed by Google.\n\nSimply put, you can think of me as a \"smart brain\" that has been trained on massive amounts of text data and is able to understand and generate human language. My core capability is processing and generating text. Specifically, I can do the following:\n\n**1. Information Query & Knowledge Answering**\nI can act like a \"talking encyclopedia,\" answering various questions, whether they're about scientific knowledge, historical events, or everyday facts.\n\n**2. Creative Writing & Text Generation**\nI can create various types of text based on your requirements, such as:\n*   **Writing**: Poetry, stories, scripts, emails, speeches, advertising copy, etc.\n*   **Planning**: Travel plans, study outlines, event proposals, etc.\n*   **Brainstorming**: Working with you to generate new ideas and spark creativity.\n\n**3. Translation & Language Processing**\nI'm proficient in multiple languages and can provide fast, fluent translation services. I can also help you polish, proofread, summarize, or rewrite text to make your expression clearer and more professional.\n\n**4. Programming & Code Assistance**\nI can write code snippets, explain code logic, debug errors, or \"translate\" code from one programming language to another, making me a helpful companion for programmers.\n\n**5. Logical Analysis & Reasoning**\nI can help you analyze complex problems, organize logical chains, and make inferences and summaries based on the information you provide.\n\n---\n\n**In summary**, my goal is to be a powerful and useful tool that helps you obtain information more efficiently, complete tasks, and spark creativity through natural language communication.\n\n**Remember:** I'm an artificial intelligence, my knowledge comes from the data I've learned, and it may not be the most up-to-date. Sometimes I may also make mistakes, so for very important information, I recommend you verify it again."
          }
        }
      },
      "Usage": {
        "type": "object",
        "description": "Token usage statistics",
        "properties": {
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in input content",
            "example": 13
          },
          "completion_tokens": {
            "type": "integer",
            "description": "Number of tokens in output content",
            "example": 1891
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens",
            "example": 1904
          },
          "prompt_tokens_details": {
            "type": "object",
            "description": "Detailed input token information",
            "properties": {
              "cached_tokens": {
                "type": "integer",
                "description": "Number of cached tokens hit",
                "example": 0
              },
              "text_tokens": {
                "type": "integer",
                "description": "Number of text tokens",
                "example": 13
              },
              "audio_tokens": {
                "type": "integer",
                "description": "Number of audio tokens",
                "example": 0
              },
              "image_tokens": {
                "type": "integer",
                "description": "Number of image tokens",
                "example": 0
              }
            }
          },
          "completion_tokens_details": {
            "type": "object",
            "description": "Detailed output token information",
            "properties": {
              "text_tokens": {
                "type": "integer",
                "description": "Number of text tokens",
                "example": 0
              },
              "audio_tokens": {
                "type": "integer",
                "description": "Number of audio tokens",
                "example": 0
              },
              "reasoning_tokens": {
                "type": "integer",
                "description": "Number of reasoning tokens",
                "example": 1480
              }
            }
          },
          "input_tokens": {
            "type": "integer",
            "description": "Number of input tokens (compatibility field)",
            "example": 0
          },
          "output_tokens": {
            "type": "integer",
            "description": "Number of output tokens (compatibility field)",
            "example": 0
          },
          "input_tokens_details": {
            "type": "object",
            "nullable": true,
            "description": "Detailed input token information (compatibility field)",
            "example": null
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status error code"
              },
              "message": {
                "type": "string",
                "description": "Error description"
              },
              "type": {
                "type": "string",
                "description": "Error type"
              },
              "param": {
                "type": "string",
                "description": "Related parameter name"
              },
              "fallback_suggestion": {
                "type": "string",
                "description": "Suggestion when error occurs"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "##All APIs require Bearer Token authentication##\n\n**Get API Key:**\n\nVisit [API Key Management Page](https://evolink.ai/dashboard/keys) to get your API Key\n\n**Add to request header:**\n```\nAuthorization: Bearer YOUR_API_KEY\n```"
      }
    }
  },
  "tags": [
    {
      "name": "Chat Completion",
      "description": "AI chat completion related APIs"
    }
  ]
}

