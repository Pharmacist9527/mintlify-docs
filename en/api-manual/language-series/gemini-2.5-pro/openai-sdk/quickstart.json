{
  "openapi": "3.1.0",
  "info": {
    "title": "Gemini-2.5-pro Quick Start",
    "description": "Get started with Gemini-2.5-pro chat API in 5 minutes for your first AI conversation",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.evolink.ai",
      "description": "Production environment"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/chat/completions": {
      "post": {
        "summary": "Gemini-2.5-pro Quick Chat",
        "description": "- Call Gemini-2.5-pro model using OpenAI SDK format\n- Synchronous processing mode, returns conversation content in real-time\n- Minimal parameters for quick start\n- ðŸ’¡ Need more features? Check [Full API Reference](./reference)",
        "operationId": "createChatCompletionQuick",
        "tags": [
          "Chat Completion"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionQuickRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat completion generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 400,
                    "message": "Invalid request parameters",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 401,
                    "message": "Invalid or expired token",
                    "type": "authentication_error"
                  }
                }
              }
            }
          },
          "402": {
            "description": "Insufficient quota, recharge required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 402,
                    "message": "Insufficient quota",
                    "type": "insufficient_quota_error",
                    "fallback_suggestion": "https://evolink.ai/dashboard/billing"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 403,
                    "message": "Access denied for this model",
                    "type": "permission_error",
                    "param": "model"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 404,
                    "message": "Specified model not found",
                    "type": "not_found_error",
                    "param": "model",
                    "fallback_suggestion": "gemini-2.5-pro"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 429,
                    "message": "Rate limit exceeded",
                    "type": "rate_limit_error",
                    "fallback_suggestion": "retry after 60 seconds"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 500,
                    "message": "Internal server error",
                    "type": "internal_server_error",
                    "fallback_suggestion": "try again later"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Upstream service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 502,
                    "message": "Upstream AI service unavailable",
                    "type": "upstream_error",
                    "fallback_suggestion": "try different model"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 503,
                    "message": "Service temporarily unavailable",
                    "type": "service_unavailable_error",
                    "fallback_suggestion": "retry after 30 seconds"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ChatCompletionQuickRequest": {
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "Chat model name",
            "enum": [
              "gemini-2.5-pro"
            ],
            "default": "gemini-2.5-pro",
            "example": "gemini-2.5-pro"
          },
          "messages": {
            "type": "array",
            "description": "List of chat messages",
            "items": {
              "$ref": "#/components/schemas/MessageSimple"
            },
            "minItems": 1,
            "example": [
              {
                "role": "user",
                "content": "Hello, introduce yourself"
              }
            ]
          }
        }
      },
      "MessageSimple": {
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "properties": {
          "role": {
            "type": "string",
            "description": "Message role",
            "enum": [
              "user"
            ]
          },
          "content": {
            "type": "string",
            "description": "Message content (plain text)"
          }
        }
      },
      "ChatCompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the chat completion",
            "example": "chatcmpl-20251010015944503180122WJNB8Eid"
          },
          "model": {
            "type": "string",
            "description": "Model name actually used",
            "example": "gemini-2.5-pro"
          },
          "object": {
            "type": "string",
            "enum": [
              "chat.completion"
            ],
            "description": "Response type",
            "example": "chat.completion"
          },
          "created": {
            "type": "integer",
            "description": "Creation timestamp",
            "example": 1760032810
          },
          "choices": {
            "type": "array",
            "description": "List of chat completion choices",
            "items": {
              "$ref": "#/components/schemas/Choice"
            }
          },
          "usage": {
            "$ref": "#/components/schemas/Usage"
          }
        }
      },
      "Choice": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "description": "Choice index",
            "example": 0
          },
          "message": {
            "$ref": "#/components/schemas/AssistantMessage"
          },
          "finish_reason": {
            "type": "string",
            "description": "Finish reason",
            "enum": [
              "stop",
              "length",
              "content_filter"
            ],
            "example": "stop"
          }
        }
      },
      "AssistantMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Message sender role",
            "enum": [
              "assistant"
            ],
            "example": "assistant"
          },
          "content": {
            "type": "string",
            "description": "AI response message content",
            "example": "Note: This is sample code!\n\nHello! I'm pleased to introduce myself.\n\nI'm a Large Language Model, trained and developed by Google..."
          }
        }
      },
      "Usage": {
        "type": "object",
        "description": "Token usage statistics",
        "properties": {
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in input content",
            "example": 13
          },
          "completion_tokens": {
            "type": "integer",
            "description": "Number of tokens in output content",
            "example": 1891
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens",
            "example": 1904
          },
          "prompt_tokens_details": {
            "type": "object",
            "description": "Detailed input token information",
            "properties": {
              "cached_tokens": {
                "type": "integer",
                "description": "Number of cached tokens hit",
                "example": 0
              },
              "text_tokens": {
                "type": "integer",
                "description": "Number of text tokens",
                "example": 13
              },
              "audio_tokens": {
                "type": "integer",
                "description": "Number of audio tokens",
                "example": 0
              },
              "image_tokens": {
                "type": "integer",
                "description": "Number of image tokens",
                "example": 0
              }
            }
          },
          "completion_tokens_details": {
            "type": "object",
            "description": "Detailed output token information",
            "properties": {
              "text_tokens": {
                "type": "integer",
                "description": "Number of text tokens",
                "example": 0
              },
              "audio_tokens": {
                "type": "integer",
                "description": "Number of audio tokens",
                "example": 0
              },
              "reasoning_tokens": {
                "type": "integer",
                "description": "Number of reasoning tokens",
                "example": 1480
              }
            }
          },
          "input_tokens": {
            "type": "integer",
            "description": "Number of input tokens (compatibility field)",
            "example": 0
          },
          "output_tokens": {
            "type": "integer",
            "description": "Number of output tokens (compatibility field)",
            "example": 0
          },
          "input_tokens_details": {
            "type": "object",
            "nullable": true,
            "description": "Detailed input token information (compatibility field)",
            "example": null
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status error code"
              },
              "message": {
                "type": "string",
                "description": "Error description"
              },
              "type": {
                "type": "string",
                "description": "Error type"
              },
              "param": {
                "type": "string",
                "description": "Related parameter name"
              },
              "fallback_suggestion": {
                "type": "string",
                "description": "Suggestion when error occurs"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "##All APIs require Bearer Token authentication##\n\n**Get API Key:**\n\nVisit [API Key Management Page](https://evolink.ai/dashboard/keys) to get your API Key\n\n**Add to request header:**\n```\nAuthorization: Bearer YOUR_API_KEY\n```"
      }
    }
  },
  "tags": [
    {
      "name": "Chat Completion",
      "description": "AI chat completion related APIs"
    }
  ]
}

