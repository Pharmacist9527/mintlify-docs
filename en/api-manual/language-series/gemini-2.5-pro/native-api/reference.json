{
  "openapi": "3.1.0",
  "info": {
    "title": "Gemini Native API - Full Reference",
    "description": "Complete reference documentation for Google Gemini Native API, supporting multimodal inputs including text, images, audio, and video",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.evolink.ai",
      "description": "Production Environment"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1beta/models/gemini-2.5-pro:{method}": {
      "post": {
        "summary": "Gemini Content Generation",
        "description": "- Call Gemini-2.5-pro model using Google Native API format\n- Synchronous processing mode, returns conversation content in real-time\n- **Plain text conversation**: Single-turn or multi-turn contextual dialogue, see simple_text and multi_turn examples in code samples\n- **Multimodal input**: Supports text + image/audio/video mixed input, see audio_analysis, image_understanding, and multi_file examples in code samples\n- **Parameter tuning**: Control generation quality via generationConfig\n- **Streaming**: Choose generation mode via method parameter",
        "operationId": "generateContent",
        "tags": [
          "Content Generation"
        ],
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["generateContent", "streamGenerateContent"]
            },
            "description": "Generation method:\n- `generateContent`: Returns complete response at once\n- `streamGenerateContent`: Streaming generation, returns content in real-time chunks",
            "example": "generateContent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateContentRequest"
              },
              "examples": {
                "simple_text": {
                  "summary": "Single-turn text conversation",
                  "value": {
                    "contents": [
                      {
                        "role": "user",
                        "parts": [
                          {
                            "text": "Please introduce yourself"
                          }
                        ]
                      }
                    ]
                  }
                },
                "multi_turn": {
                  "summary": "Multi-turn conversation (context understanding)",
                  "value": {
                    "contents": [
                      {
                        "role": "user",
                        "parts": [
                          {
                            "text": "What is Python?"
                          }
                        ]
                      },
                      {
                        "role": "model",
                        "parts": [
                          {
                            "text": "Python is a high-level programming language..."
                          }
                        ]
                      },
                      {
                        "role": "user",
                        "parts": [
                          {
                            "text": "What are its advantages?"
                          }
                        ]
                      }
                    ]
                  }
                },
                "audio_analysis": {
                  "summary": "Audio analysis",
                  "value": {
                    "contents": [
                      {
                        "role": "user",
                        "parts": [
                          {
                            "text": "Please analyze this song audio and answer: 1. Song source and artist 2. Song mood 3. Complete lyrics output"
                          },
                          {
                            "fileData": {
                              "mimeType": "audio/mp3",
                              "fileUri": "https://example.com/audio.mp3"
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "image_understanding": {
                  "summary": "Image understanding",
                  "value": {
                    "contents": [
                      {
                        "role": "user",
                        "parts": [
                          {
                            "text": "Please describe the scene and main elements in this image in detail"
                          },
                          {
                            "fileData": {
                              "mimeType": "image/jpeg",
                              "fileUri": "https://example.com/image.jpg"
                            }
                          }
                        ]
                      }
                    ]
                  }
                },
                "multi_file": {
                  "summary": "Multi-file input (mixed)",
                  "value": {
                    "contents": [
                      {
                        "role": "user",
                        "parts": [
                          {
                            "text": "Compare the relationship between these two images and this audio"
                          },
                          {
                            "fileData": {
                              "mimeType": "image/jpeg",
                              "fileUri": "https://example.com/image1.jpg"
                            }
                          },
                          {
                            "fileData": {
                              "mimeType": "image/png",
                              "fileUri": "https://example.com/image2.png"
                            }
                          },
                          {
                            "fileData": {
                              "mimeType": "audio/mp3",
                              "fileUri": "https://example.com/audio.mp3"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Content generated successfully\n\n**Response format description**:\n- When `method=generateContent`, returns `GenerateContentResponse` (returns complete response at once)\n- When `method=streamGenerateContent`, returns `StreamGenerateContentResponse` (streaming response, returns content in chunks)",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GenerateContentResponse"
                    },
                    {
                      "$ref": "#/components/schemas/StreamGenerateContentResponse"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "402": {
            "description": "Insufficient quota, recharge required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "413": {
            "description": "Request body too large, file too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "502": {
            "description": "Upstream service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GenerateContentRequest": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "contents": {
            "type": "array",
            "description": "List of conversation contents, supports multi-turn dialogue and multimodal input",
            "items": {
              "$ref": "#/components/schemas/Content"
            },
            "minItems": 1
          },
          "generationConfig": {
            "$ref": "#/components/schemas/GenerationConfig",
            "description": "Generation configuration parameters (optional)"
          }
        }
      },
      "Content": {
        "type": "object",
        "required": [
          "role",
          "parts"
        ],
        "properties": {
          "role": {
            "type": "string",
            "description": "Content role\n\n- `user`: User input\n- `model`: AI model's reply (for multi-turn conversation)",
            "enum": [
              "user",
              "model"
            ],
            "example": "user"
          },
          "parts": {
            "type": "array",
            "description": "List of content parts, supports text and file data",
            "items": {
              "$ref": "#/components/schemas/Part"
            },
            "minItems": 1
          }
        }
      },
      "Part": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/TextPart"
          },
          {
            "$ref": "#/components/schemas/FilePart"
          }
        ]
      },
      "TextPart": {
        "title": "Text Input",
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "description": "Text content",
            "example": "Hello! I'm pleased to introduce myself.\n\nI'm a large language model, trained and developed by Google..."
          }
        }
      },
      "FilePart": {
        "title": "Multimodal Input",
        "type": "object",
        "required": [
          "fileData"
        ],
        "properties": {
          "fileData": {
            "type": "object",
            "required": [
              "mimeType",
              "fileUri"
            ],
            "properties": {
              "mimeType": {
                "type": "string",
                "description": "File MIME type\n\n**Supported types**:\n\n**Image**:\n- `image/jpeg`, `image/png`\n- Maximum size per image: 10 MB\n\n**Audio**:\n- `audio/mp3`\n- Maximum size per file: 10 MB\n- Recommended duration: no more than 10 minutes\n\n**Video**:\n- `video/mp4`\n- Maximum size per file: 50 MB\n- Recommended duration: no more than 180 seconds\n\n**Document**:\n- `application/pdf`\n- Maximum size per file: 20 MB",
                "example": "audio/mp3"
              },
              "fileUri": {
                "type": "string",
                "format": "uri",
                "description": "File URI address\n\n**Requirements**:\n- Must be a publicly accessible URL\n- URL should end with file extension (e.g., .mp3, .jpg) and should match the mimeType parameter",
                "example": "https://example.com/audio.mp3"
              }
            }
          }
        }
      },
      "GenerationConfig": {
        "type": "object",
        "description": "Generation configuration parameters",
        "properties": {
          "temperature": {
            "type": "number",
            "description": "Sampling temperature, controls output randomness\n\n**Description**:\n- Lower values (e.g., 0.2): More deterministic, focused output\n- Higher values (e.g., 1.5): More random, creative output",
            "minimum": 0,
            "maximum": 2,
            "example": 0.7
          },
          "maxOutputTokens": {
            "type": "integer",
            "description": "Maximum number of tokens for generated response\n\n**Description**:\n- Too small value may cause response truncation",
            "minimum": 1,
            "example": 2000
          },
          "topP": {
            "type": "number",
            "description": "Nucleus Sampling parameter\n\n**Description**:\n- Controls sampling from tokens with cumulative probability\n- For example, 0.9 means selecting from tokens with cumulative probability up to 90%\n- Default: 1.0 (considers all tokens)\n\n**Recommendation**: Do not adjust temperature and topP simultaneously",
            "minimum": 0,
            "maximum": 1,
            "example": 0.9
          },
          "topK": {
            "type": "integer",
            "description": "Top-K sampling parameter\n\n**Description**:\n- For example, 10 means limiting sampling to consider only the top 10 most probable tokens\n- Smaller values make output more focused\n- Default: no limit",
            "minimum": 1,
            "example": 40
          }
        }
      },
      "GenerateContentResponse": {
        "title": "Sync Response",
        "type": "object",
        "properties": {
          "candidates": {
            "type": "array",
            "description": "List of candidate responses",
            "items": {
              "$ref": "#/components/schemas/Candidate"
            }
          },
          "promptFeedback": {
            "$ref": "#/components/schemas/PromptFeedback"
          },
          "usageMetadata": {
            "$ref": "#/components/schemas/UsageMetadata"
          }
        }
      },
      "Candidate": {
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ContentResponse"
          },
          "finishReason": {
            "type": "string",
            "description": "Finish reason",
            "enum": [
              "STOP",
              "MAX_TOKENS",
              "SAFETY",
              "RECITATION",
              "OTHER"
            ],
            "example": "STOP"
          },
          "index": {
            "type": "integer",
            "description": "Candidate index",
            "example": 0
          },
          "safetyRatings": {
            "type": "array",
            "nullable": true,
            "description": "Safety ratings",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ContentResponse": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Response role",
            "enum": [
              "model"
            ],
            "example": "model"
          },
          "parts": {
            "type": "array",
            "description": "Response content parts",
            "items": {
              "$ref": "#/components/schemas/TextPart"
            }
          }
        }
      },
      "PromptFeedback": {
        "type": "object",
        "properties": {
          "safetyRatings": {
            "type": "array",
            "nullable": true,
            "description": "Prompt safety ratings",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "UsageMetadata": {
        "type": "object",
        "description": "Usage statistics",
        "properties": {
          "promptTokenCount": {
            "type": "integer",
            "description": "Number of tokens in input content",
            "example": 4
          },
          "candidatesTokenCount": {
            "type": "integer",
            "description": "Number of tokens in output content",
            "example": 611
          },
          "totalTokenCount": {
            "type": "integer",
            "description": "Total number of tokens",
            "example": 2422
          },
          "thoughtsTokenCount": {
            "type": "integer",
            "description": "Number of reasoning tokens",
            "example": 1807
          },
          "promptTokensDetails": {
            "type": "array",
            "description": "Detailed input token information (by modality)",
            "items": {
              "$ref": "#/components/schemas/TokenDetail"
            }
          }
        }
      },
      "TokenDetail": {
        "type": "object",
        "description": "Token details (statistics by modality)",
        "properties": {
          "modality": {
            "type": "string",
            "description": "Content modality type",
            "enum": [
              "TEXT",
              "IMAGE",
              "AUDIO",
              "VIDEO"
            ],
            "example": "TEXT"
          },
          "tokenCount": {
            "type": "integer",
            "description": "Number of tokens for this modality",
            "example": 4
          }
        }
      },
      "StreamCandidate": {
        "type": "object",
        "description": "Stream response candidate (more simplified than regular response)",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ContentResponse"
          },
          "finishReason": {
            "type": "string",
            "description": "Finish reason (only included in last chunk)",
            "enum": [
              "STOP",
              "MAX_TOKENS",
              "SAFETY",
              "RECITATION",
              "OTHER"
            ],
            "example": "STOP"
          }
        }
      },
      "StreamGenerateContentResponse": {
        "title": "Stream Response",
        "type": "object",
        "description": "Stream response chunk\n\n**Intermediate chunk**:\n```json\n{\n  \"candidates\": [\n    {\n      \"content\": {\n        \"role\": \"model\",\n        \"parts\": [{ \"text\": \"Partial text...\" }]\n      }\n    }\n  ],\n  \"usageMetadata\": {\n    \"trafficType\": \"ON_DEMAND\"\n  },\n  \"modelVersion\": \"gemini-2.5-pro\",\n  \"createTime\": \"2025-10-10T10:40:23.072315Z\",\n  \"responseId\": \"xxx\"\n}\n```\n\n**Last chunk**:\n```json\n{\n  \"candidates\": [\n    {\n      \"content\": {\n        \"role\": \"model\",\n        \"parts\": [{ \"text\": \"Final text fragment\" }]\n      },\n      \"finishReason\": \"STOP\"\n    }\n  ],\n  \"usageMetadata\": {\n    \"promptTokenCount\": 4,\n    \"candidatesTokenCount\": 522,\n    \"totalTokenCount\": 2191,\n    \"trafficType\": \"ON_DEMAND\"\n  },\n  \"modelVersion\": \"gemini-2.5-pro\",\n  \"createTime\": \"2025-10-10T10:40:23.072315Z\",\n  \"responseId\": \"xxx\"\n}\n```",
        "properties": {
          "candidates": {
            "type": "array",
            "description": "List of candidate responses (streaming mode does not include index and safetyRatings)",
            "items": {
              "$ref": "#/components/schemas/StreamCandidate"
            }
          },
          "usageMetadata": {
            "type": "object",
            "description": "Usage statistics (intermediate chunks only have trafficType, last chunk contains complete statistics)",
            "properties": {
              "promptTokenCount": {
                "type": "integer",
                "description": "Number of tokens in input content (last chunk only)",
                "example": 4
              },
              "candidatesTokenCount": {
                "type": "integer",
                "description": "Number of tokens in output content (last chunk only)",
                "example": 522
              },
              "totalTokenCount": {
                "type": "integer",
                "description": "Total number of tokens (last chunk only)",
                "example": 2191
              },
              "trafficType": {
                "type": "string",
                "description": "Traffic type",
                "example": "ON_DEMAND"
              }
            }
          },
          "modelVersion": {
            "type": "string",
            "description": "Model version",
            "example": "gemini-2.5-pro"
          },
          "createTime": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time",
            "example": "2025-10-10T10:40:23.072315Z"
          },
          "responseId": {
            "type": "string",
            "description": "Response ID",
            "example": "l-LoaPu0BPmo1dkP6ZPHiQc"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status error code"
              },
              "message": {
                "type": "string",
                "description": "Error description"
              },
              "type": {
                "type": "string",
                "description": "Error type"
              },
              "fallback_suggestion": {
                "type": "string",
                "description": "Suggestion when error occurs"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "##All APIs require Bearer Token authentication##\n\n**Get API Key:**\n\nVisit [API Key Management Page](https://evolink.ai/dashboard/keys) to get your API Key\n\n**Add to request header:**\n```\nAuthorization: Bearer YOUR_API_KEY\n```"
      }
    }
  },
  "tags": [
    {
      "name": "Content Generation",
      "description": "Gemini AI content generation related APIs"
    }
  ]
}

