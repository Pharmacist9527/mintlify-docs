{
  "openapi": "3.1.0",
  "info": {
    "title": "Gemini Native API - Quick Start",
    "description": "Get started with Google Gemini Native API in 5 minutes for your first AI conversation",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.evolink.ai",
      "description": "Production Environment"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1beta/models/gemini-2.5-pro:{method}": {
      "post": {
        "summary": "Gemini-2.5-pro Quick Chat",
        "description": "- Call Gemini-2.5-pro model using Google Native API format\n- Synchronous processing mode, returns conversation content in real-time\n- Minimal parameters for quick start\n- ðŸ’¡ Need more features? Check [Full API Reference](./reference)",
        "operationId": "generateContentQuick",
        "tags": [
          "Content Generation"
        ],
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["generateContent", "streamGenerateContent"]
            },
            "description": "Generation method (Quick start recommends `generateContent`):\n- `generateContent`: Returns complete response at once\n- `streamGenerateContent`: Streaming return, receives content in real-time chunks",
            "example": "generateContent"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateContentQuickRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Content generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateContentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 400,
                    "message": "Invalid request parameters",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 401,
                    "message": "Invalid or expired token",
                    "type": "authentication_error"
                  }
                }
              }
            }
          },
          "402": {
            "description": "Insufficient quota, recharge required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 402,
                    "message": "Insufficient quota",
                    "type": "insufficient_quota_error",
                    "fallback_suggestion": "https://evolink.ai/dashboard/billing"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 403,
                    "message": "Access denied for this model",
                    "type": "permission_error"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 404,
                    "message": "Model not found",
                    "type": "not_found_error"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 429,
                    "message": "Rate limit exceeded",
                    "type": "rate_limit_error",
                    "fallback_suggestion": "retry after 60 seconds"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 500,
                    "message": "Internal server error",
                    "type": "internal_server_error",
                    "fallback_suggestion": "try again later"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Upstream service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 502,
                    "message": "Upstream AI service unavailable",
                    "type": "upstream_error",
                    "fallback_suggestion": "try again later"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 503,
                    "message": "Service temporarily unavailable",
                    "type": "service_unavailable_error",
                    "fallback_suggestion": "retry after 30 seconds"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GenerateContentQuickRequest": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "contents": {
            "type": "array",
            "description": "List of conversation contents",
            "items": {
              "$ref": "#/components/schemas/ContentSimple"
            },
            "minItems": 1,
            "example": [
              {
                "role": "user",
                "parts": [
                  {
                    "text": "Hello, introduce yourself"
                  }
                ]
              }
            ]
          }
        }
      },
      "ContentSimple": {
        "type": "object",
        "required": [
          "role",
          "parts"
        ],
        "properties": {
          "role": {
            "type": "string",
            "description": "Content role",
            "enum": [
              "user"
            ],
            "example": "user"
          },
          "parts": {
            "type": "array",
            "description": "List of content parts (plain text)",
            "items": {
              "$ref": "#/components/schemas/TextPart"
            },
            "minItems": 1
          }
        }
      },
      "TextPart": {
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "description": "Text content",
            "example": "Hello! I'm pleased to introduce myself.\n\nI'm a large language model, trained and developed by Google..."
          }
        }
      },
      "GenerateContentResponse": {
        "type": "object",
        "properties": {
          "candidates": {
            "type": "array",
            "description": "List of candidate responses",
            "items": {
              "$ref": "#/components/schemas/Candidate"
            }
          },
          "promptFeedback": {
            "$ref": "#/components/schemas/PromptFeedback"
          },
          "usageMetadata": {
            "$ref": "#/components/schemas/UsageMetadata"
          }
        }
      },
      "Candidate": {
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/ContentResponse"
          },
          "finishReason": {
            "type": "string",
            "description": "Finish reason",
            "enum": [
              "STOP",
              "MAX_TOKENS",
              "SAFETY",
              "RECITATION",
              "OTHER"
            ],
            "example": "STOP"
          },
          "index": {
            "type": "integer",
            "description": "Candidate index",
            "example": 0
          },
          "safetyRatings": {
            "type": "array",
            "nullable": true,
            "description": "Safety ratings",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ContentResponse": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Response role",
            "enum": [
              "model"
            ],
            "example": "model"
          },
          "parts": {
            "type": "array",
            "description": "Response content parts",
            "items": {
              "$ref": "#/components/schemas/TextPart"
            }
          }
        }
      },
      "PromptFeedback": {
        "type": "object",
        "properties": {
          "safetyRatings": {
            "type": "array",
            "nullable": true,
            "description": "Prompt safety ratings",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "UsageMetadata": {
        "type": "object",
        "description": "Usage statistics",
        "properties": {
          "promptTokenCount": {
            "type": "integer",
            "description": "Number of tokens in input content",
            "example": 4
          },
          "candidatesTokenCount": {
            "type": "integer",
            "description": "Number of tokens in output content",
            "example": 611
          },
          "totalTokenCount": {
            "type": "integer",
            "description": "Total number of tokens",
            "example": 2422
          },
          "thoughtsTokenCount": {
            "type": "integer",
            "description": "Number of reasoning tokens",
            "example": 1807
          },
          "promptTokensDetails": {
            "type": "array",
            "description": "Detailed input token information (by modality)",
            "items": {
              "$ref": "#/components/schemas/TokenDetail"
            }
          }
        }
      },
      "TokenDetail": {
        "type": "object",
        "description": "Token details (statistics by modality)",
        "properties": {
          "modality": {
            "type": "string",
            "description": "Content modality type",
            "enum": [
              "TEXT",
              "IMAGE",
              "AUDIO",
              "VIDEO"
            ],
            "example": "TEXT"
          },
          "tokenCount": {
            "type": "integer",
            "description": "Number of tokens for this modality",
            "example": 4
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status error code"
              },
              "message": {
                "type": "string",
                "description": "Error description"
              },
              "type": {
                "type": "string",
                "description": "Error type"
              },
              "fallback_suggestion": {
                "type": "string",
                "description": "Suggestion when error occurs"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "##All APIs require Bearer Token authentication##\n\n**Get API Key:**\n\nVisit [API Key Management Page](https://evolink.ai/dashboard/keys) to get your API Key\n\n**Add to request header:**\n```\nAuthorization: Bearer YOUR_API_KEY\n```"
      }
    }
  },
  "tags": [
    {
      "name": "Content Generation",
      "description": "Gemini AI content generation related APIs"
    }
  ]
}

