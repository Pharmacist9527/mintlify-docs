{
  "openapi": "3.1.0",
  "info": {
    "title": "doubao-seedream-4.0 Interface",
    "description": "Create image tasks using AI models with support for multiple models and parameter configurations",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.evolink.ai",
      "description": "Production environment"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/images/generations": {
      "post": {
        "summary": "doubao-seedream-4.0 Interface",
        "description": "- Seedream 4.0 (doubao-seedream-4.0) model supports text-to-image, image-to-image, image editing and other generation modes\n- Asynchronous processing mode, use the returned task ID to [query](/en/api-manual/task-management/get-task-detail)\n- Generated image links are valid for 24 hours, please save them promptly",
        "operationId": "createImageGeneration",
        "tags": [
          "Image Generation"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerationRequest"
              },
              "examples": {
                "text_to_image": {
                  "summary": "Text to Image",
                  "value": {
                    "model": "doubao-seedream-4.0",
                    "prompt": "A serene lake reflecting the beautiful sunset scenery"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image generation task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageGenerationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 400,
                    "message": "Invalid request parameters",
                    "type": "invalid_request_error"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated, invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 401,
                    "message": "Invalid or expired token",
                    "type": "authentication_error"
                  }
                }
              }
            }
          },
          "402": {
            "description": "Insufficient quota, recharge required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 402,
                    "message": "Insufficient quota",
                    "type": "insufficient_quota_error",
                    "fallback_suggestion": "https://evolink.ai/dashboard/billing"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 403,
                    "message": "Access denied for this model",
                    "type": "permission_error",
                    "param": "model"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 404,
                    "message": "Specified model not found",
                    "type": "not_found_error",
                    "param": "model",
                    "fallback_suggestion": "doubao-seedream-4.0"
                  }
                }
              }
            }
          },
          "413": {
            "description": "Request body too large",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 413,
                    "message": "Image file too large",
                    "type": "request_too_large_error",
                    "param": "image_urls",
                    "fallback_suggestion": "compress image to under 4MB"
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 429,
                    "message": "Rate limit exceeded",
                    "type": "rate_limit_error",
                    "fallback_suggestion": "retry after 60 seconds"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 500,
                    "message": "Internal server error",
                    "type": "internal_server_error",
                    "fallback_suggestion": "try again later"
                  }
                }
              }
            }
          },
          "502": {
            "description": "Upstream service error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 502,
                    "message": "Upstream AI service unavailable",
                    "type": "upstream_error",
                    "fallback_suggestion": "try different model"
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service temporarily unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "error": {
                    "code": 503,
                    "message": "Service temporarily unavailable",
                    "type": "service_unavailable_error",
                    "fallback_suggestion": "retry after 30 seconds"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ImageGenerationRequest": {
        "type": "object",
        "required": [
          "model",
          "prompt"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "Image generation model name",
            "enum": [
              "doubao-seedream-4.0"
            ],
            "default": "doubao-seedream-4.0",
            "example": "doubao-seedream-4.0"
          },
          "prompt": {
            "type": "string",
            "description": "Prompt describing the image to be generated, or describing how to edit the input image",
            "example": "A serene lake reflecting the beautiful sunset scenery",
            "maxLength": 1000
          },
          "n": {
            "type": "integer",
            "description": "Specifies the upper limit for the number of images to generate, supports any integer value between `[1,15]`\n\n**Note:**\n- If you need to generate multiple images, please include in the prompt: \" `generate 2 different images` \" or similar instructions\n\n- Reference image count + final generated image count ≤ 15\n\n- If: reference image count + required images in prompt > 15, and required images in prompt ≤ parameter n value, then final generated image count = 15 - reference image count\n- Single request will pre-charge based on the value of `n`, actual billing is based on the number of images generated",
            "example": 1
          },
          "size": {
            "type": "string",
            "description": "Size of generated images, supports two formats:\n\n**Simplified format:**\n- `1K`, `2K`, `4K`\n\n**Pixel format:**\n- Width x height, such as: `1280x720`, `1024x1024`, `4096x4096` and other values within the range\n- Total pixel range: `[1280x720, 4096x4096]`\n- Aspect ratio range: `[1/16, 16]`",
            "example": "2048x2048"
          },
          "image_urls": {
            "type": "array",
            "description": "Reference image URL list for image-to-image and image editing functions\n\n**Note:**\n- Maximum number of input images per request: `10`\n- Image size: not exceeding `10MB`\n- Supported image formats: `.jpeg`, `.jpg`, `.png`\n- Aspect ratio (width/height) range: `[1/3, 3]`\n- Total pixels: not exceeding `6000×6000`\n- Image URLs must be directly accessible by the server, or the image URL should directly download when accessed (typically these URLs end with image file extensions, such as `.png`, `.jpg`)",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "maxItems": 10,
            "example": [
              "https://example.com/image1.png",
              "https://example.com/image2.png"
            ]
          },
          "callback_url": {
            "type": "string",
            "description": "HTTPS callback address after task completion\n\n**Callback Timing:**\n- Triggered when task is completed, failed, or cancelled\n- Sent after billing confirmation is completed\n\n**Security Restrictions:**\n- Only HTTPS protocol is supported\n- Callback to internal IP addresses is prohibited (127.0.0.1, 10.x.x.x, 172.16-31.x.x, 192.168.x.x, etc.)\n- URL length must not exceed `2048` characters\n\n**Callback Mechanism:**\n- Timeout: `10` seconds\n- Maximum `3` retries on failure (retries after `1` second/`2` seconds/`4` seconds)\n- Callback response body format is consistent with the task query API response format\n- Callback address returning 2xx status code is considered successful, other status codes will trigger retry",
            "format": "uri",
            "example": "https://your-domain.com/webhooks/image-task-completed"
          }
        }
      },
      "ImageGenerationResponse": {
        "type": "object",
        "properties": {
          "created": {
            "type": "integer",
            "description": "Task creation timestamp",
            "example": 1757165031
          },
          "id": {
            "type": "string",
            "description": "Task ID",
            "example": "task-unified-1757165031-seedream4d"
          },
          "model": {
            "type": "string",
            "description": "Actual model name used",
            "example": "doubao-seedream-4.0"
          },
          "object": {
            "type": "string",
            "enum": [
              "image.generation.task"
            ],
            "description": "Specific type of the task"
          },
          "progress": {
            "type": "integer",
            "description": "Task progress percentage (0-100)",
            "minimum": 0,
            "maximum": 100,
            "example": 0
          },
          "status": {
            "type": "string",
            "description": "Task status",
            "enum": [
              "pending",
              "processing",
              "completed",
              "failed"
            ],
            "example": "pending"
          },
          "task_info": {
            "$ref": "#/components/schemas/TaskInfo",
            "description": "Async task information"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "image",
              "audio",
              "video"
            ],
            "description": "Output type of the task",
            "example": "image"
          },
          "usage": {
            "$ref": "#/components/schemas/Usage",
            "description": "Usage and billing information"
          }
        }
      },
      "TaskInfo": {
        "type": "object",
        "properties": {
          "can_cancel": {
            "type": "boolean",
            "description": "Whether the task can be cancelled",
            "example": true
          },
          "estimated_time": {
            "type": "integer",
            "description": "Estimated completion time (seconds)",
            "minimum": 0,
            "example": 45
          }
        }
      },
      "Usage": {
        "type": "object",
        "description": "Usage and billing information",
        "properties": {
          "billing_rule": {
            "type": "string",
            "description": "Billing rule",
            "enum": [
              "per_call",
              "per_token",
              "per_second"
            ],
            "example": "per_call"
          },
          "credits_reserved": {
            "type": "number",
            "description": "Estimated credits consumed",
            "minimum": 0,
            "example": 1.8
          },
          "user_group": {
            "type": "string",
            "description": "User group category",
            "example": "default"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status error code"
              },
              "message": {
                "type": "string",
                "description": "Error description"
              },
              "type": {
                "type": "string",
                "description": "Error type"
              },
              "param": {
                "type": "string",
                "description": "Related parameter name"
              },
              "fallback_suggestion": {
                "type": "string",
                "description": "Suggestion when error occurs"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "##All APIs require Bearer Token authentication##\n\n**Get API Key:**\n\nVisit [API Key Management Page](https://evolink.ai/dashboard/keys) to get your API Key\n\n**Add to request header when using:**\n```\nAuthorization: Bearer YOUR_API_KEY\n```"
      }
    }
  },
  "tags": [
    {
      "name": "Image Generation",
      "description": "AI image generation related APIs"
    }
  ]
}